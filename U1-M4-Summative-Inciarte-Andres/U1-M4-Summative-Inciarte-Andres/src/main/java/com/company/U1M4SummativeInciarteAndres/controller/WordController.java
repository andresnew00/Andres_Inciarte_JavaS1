package com.company.U1M4SummativeInciarteAndres.controller;

import com.company.U1M4SummativeInciarteAndres.model.Definition;
import com.company.U1M4SummativeInciarteAndres.model.Quote;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Random;

@RestController
public class WordController {

    @GetMapping(value = "/word")
    @ResponseStatus(value = HttpStatus.OK)
    public Definition giveMeaQuote() {
        Random random = new Random();
        int randomNumber = random.nextInt(10) + 1;
        Definition myWord = new Definition();

        switch (randomNumber){

            case 1:
                myWord.setWord("Array");
                myWord.setDefinition("an ordered series or arrangement.");
                return myWord;
            case 2:
                myWord.setWord("Method");
                myWord.setDefinition("is a collection of statements that perform some specific task and return the result to the caller.");
                return myWord;
            case 3:
                myWord.setWord("Abstract");
                myWord.setDefinition("A Java keyword used in a class definition to specify that a class is not to be instantiated, but rather inherited by other classes.");
                return myWord;
            case 4:
                myWord.setWord("Abstract Class");
                myWord.setDefinition("A class that contains one or more abstract methods , and therefore can never be instantiated.");
                return myWord;
            case 5:
                myWord.setWord("Bean");
                myWord.setDefinition("A reusable software component that conforms to certain design and naming conventions.");
                return myWord;
            case 6:
                myWord.setWord("Block");
                myWord.setDefinition("In the Java programming language, any code between matching braces.");
                return myWord;
            case 7:
                myWord.setWord("Bytecode");
                myWord.setDefinition("Machine-independent code generated by the Java compiler and executed by the Java interpreter.");
                return myWord;
            case 8:
                myWord.setWord("Declaration");
                myWord.setDefinition("A statement that establishes an identifier and associates attributes with it, without necessarily reserving its storage (for data) or providing the implementation (for methods).");
                return myWord;
            case 9:
                myWord.setWord("DOM");
                myWord.setDefinition("Document Object Model.");
                return myWord;
            case 10:
                myWord.setWord("Exception");
                myWord.setDefinition("An event during program execution that prevents the program from continuing normally; generally, an error.");
            default:
                throw new NumberFormatException();
        }
    }
}
